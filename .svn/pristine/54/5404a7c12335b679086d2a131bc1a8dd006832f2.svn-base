#define ONE_TUBE

//#define DEBUG_ESP_WIFI
//#define DEBUG_ESP_PORT Serial

#define DEBUG(...) { Serial.println(__VA_ARGS__); }
//#define DEBUG(...) { }

#include "Arduino.h"
#include <ArduinoOTA.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <ESP8266mDNS.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
//#include <ESP8266HTTPClient.h>
#include <ESPAsyncHTTPClient.h>
#include <ESPAsyncWiFiManager.h>
#include <DNSServer.h>

#include <TimeLib.h>

#include <ITS1ANixieDriver.h>
#include <OneNixieClock.h>
#include <TwoNixieClock.h>
#include <FourNixieClock.h>
#include <SixNixieClock.h>
#include <SoftMSTimer.h>

unsigned long nowMs = 0;

String chipId = String(ESP.getChipId(), HEX);
String ssid = "STC-";

String hostName("ITS1A");

AsyncWebServer server(80);
AsyncWebSocket ws("/ws"); // access at ws://[esp ip]/ws
AsyncHTTPClient httpClient;
DNSServer dns;
AsyncWiFiManager wifiManager(&server,&dns);

ITS1ANixieDriver nixieDriver(6);
NixieDriver *pDriver = &nixieDriver;
//OneNixieClock oneNixieClock(pDriver, 60);
//TwoNixieClock oneNixieClock(pDriver);
//FourNixieClock oneNixieClock(pDriver);
SixNixieClock oneNixieClock(pDriver);
NixieClock *pNixieClock = &oneNixieClock;

void initClock() {
	pDriver->init();
	pNixieClock->setNixieDriver(pDriver);
	pNixieClock->init();
}

void grabInts(String s, int *dest, String sep) {
	int end = 0;
	for (int start = 0; end != -1; start = end + 1) {
		end = s.indexOf(sep, start);
		if (end > 0) {
			*dest++ = s.substring(start, end).toInt();
		} else {
			*dest++ = s.substring(start).toInt();
		}
	}
}

void grabBytes(String s, byte *dest, String sep) {
	int end = 0;
	for (int start = 0; end != -1; start = end + 1) {
		end = s.indexOf(sep, start);
		if (end > 0) {
			*dest++ = s.substring(start, end).toInt();
		} else {
			*dest++ = s.substring(start).toInt();
		}
	}
}

void readTimeFailed(String msg) {
	DEBUG(msg);
}

#define SYNC_HOURS 3
#define SYNC_MINS 4
#define SYNC_SECS 5
#define SYNC_DAY 2
#define SYNC_MONTH 1
#define SYNC_YEAR 0

bool timeInitialized = false;

void setTimeFromInternet() {
	String body = httpClient.getBody();
	DEBUG(String("Got response") + body);
	int intValues[6];
	grabInts(body, &intValues[0], ",");

	timeInitialized = true;
    setTime(intValues[SYNC_HOURS], intValues[SYNC_MINS], intValues[SYNC_SECS], intValues[SYNC_DAY], intValues[SYNC_MONTH], intValues[SYNC_YEAR]);
}

void createSSID() {
	// Create a unique SSID that includes the hostname. Max SSID length is 32!
	ssid = (chipId + hostName).substring(0, 31);
}

void getTime() {
	if (WiFi.status() == WL_CONNECTED) {
		httpClient.makeRequest(setTimeFromInternet, readTimeFailed);
	}
}

void StartOTA() {
	// Port defaults to 8266
	ArduinoOTA.setPort(8266);

	// Hostname defaults to esp8266-[ChipID]
	ArduinoOTA.setHostname(((String)hostName).c_str());

	// No authentication by default
//	ArduinoOTA.setPassword("in14");

	ArduinoOTA.onStart([]() {DEBUG("OTA Start");});
	ArduinoOTA.onEnd([]() {DEBUG("\nOTA End");});
	ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
		DEBUG("OTA Progress: ");DEBUG(progress / (total / 100));DEBUG("\r");
	});
	ArduinoOTA.onError([](ota_error_t error) {
		DEBUG("OTA Error:")
		switch (error) {
			case OTA_AUTH_ERROR: DEBUG("Auth Failed"); break;
			case OTA_BEGIN_ERROR: DEBUG("Begin Failed"); break;
			case OTA_CONNECT_ERROR: DEBUG("Connect Failed"); break;
			case OTA_RECEIVE_ERROR: DEBUG("Receive Failed"); break;
			case OTA_END_ERROR: DEBUG("End Failed"); break;
		}
	});

	ArduinoOTA.begin();
}

void SetupServer() {
	DEBUG("SetupServer()");

    StartOTA();

	MDNS.begin(hostName.c_str());
    MDNS.addService("http", "tcp", 80);

    getTime();
}

SoftMSTimer::TimerInfo syncTimeTimer = {
		3600000,	// 1 hour between syncs
		0,
		true,
		getTime
};

SoftMSTimer::TimerInfo *infos[] = {
		&syncTimeTimer,
		0
};

SoftMSTimer timedFunctions(infos);

void setup()
{
	chipId.toUpperCase();
//	Serial.begin(921600);
	Serial.begin(115200);

	initClock();

	createSSID();

	DEBUG("Set wifiManager")
	wifiManager.setDebugOutput(false);
	wifiManager.setConnectTimeout(10);
	wifiManager.setSaveConfigCallback(SetupServer);
    wifiManager.startConfigPortalModeless(ssid.c_str(), "secretsauce");

	httpClient.initialize("http://time.nixies.us/getTime/America/New_York");
	getTime();

	nowMs = millis();

	DEBUG("Exit setup")
}

void loop()
{
	ArduinoOTA.handle();
	wifiManager.loop();

	nowMs = millis();

	if (timeInitialized) {
		pNixieClock->setClockMode(true);
		pNixieClock->setCountSpeed(60);
	} else {
		pNixieClock->setClockMode(false);
		pNixieClock->setCountSpeed(60);
	}

	pNixieClock->setFadeMode(0);
	pNixieClock->setTimeMode(true);
	pNixieClock->setDateFormat(1);
	pNixieClock->setShowSeconds(false);
	pNixieClock->set12hour(false);
	pNixieClock->setOnOff(6, 0);
	pNixieClock->setDigitsOn(1500);
	pNixieClock->setScrollback(true);

	pNixieClock->loop(nowMs);
	timedFunctions.loop();
}
