#define ONE_TUBE
#define NEOPIXELS

//#define DEBUG_ESP_WIFI
//#define DEBUG_ESP_PORT Serial

//#define DEBUG(...) { Serial.println(__VA_ARGS__); }
#define DEBUG(...) { }

#include "Arduino.h"
#include <ConfigItem.h>
#include <EEPROMConfig.h>
#define OTA
#ifdef OTA
#include <ArduinoOTA.h>
#endif
#include <EEPROM.h>
#include <SPIFFSEditor.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <ESP8266mDNS.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
//#include <ESP8266HTTPClient.h>
#include <ESPAsyncHTTPClient.h>
#include <ESPAsyncWiFiManager.h>
#include <DNSServer.h>

#include <TimeLib.h>

#include <ITS1ANixieDriver.h>
#include <OneNixieClock.h>
#include <TwoNixieClock.h>
#include <FourNixieClock.h>
#include <SixNixieClock.h>
#include <SoftMSTimer.h>

#ifdef NEOPIXELS
#include <Adafruit_NeoPixel.h>

#define PIN            1

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS      8

// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
#endif

unsigned long nowMs = 0;

String chipId = String(ESP.getChipId(), HEX);
String ssid = "STC-";

StringConfigItem hostName("hostname", 63, "ITS1A");

AsyncWebServer server(80);
AsyncWebSocket ws("/ws"); // access at ws://[esp ip]/ws
AsyncHTTPClient httpClient;
DNSServer dns;
AsyncWiFiManager wifiManager(&server,&dns);

ITS1ANixieDriver nixieDriver(6);
NixieDriver *pDriver = &nixieDriver;
SixNixieClock oneNixieClock(pDriver);
NixieClock *pNixieClock = &oneNixieClock;

namespace ConfigSet1 {
#include <ITS1AConfigSet1.h>
}

namespace ConfigSet2 {
#include <ITS1AConfigSet2.h>
}	// End namespace

namespace ConfigSet3 {
#include <ITS1AConfigSet3.h>
}	// End namespace

namespace ConfigSet4 {
#include <ITS1AConfigSet4.h>
}	// End namespace

namespace ConfigSet5 {
#include <ITS1AConfigSet5.h>
}	// End namespace

StringConfigItem set1Name("set1_name", 12, "24 Hour");
StringConfigItem set2Name("set2_name", 12, "12 Hour");
StringConfigItem set3Name("set3_name", 12, "Fast Clock");
StringConfigItem set4Name("set4_name", 12, "Test");
StringConfigItem set5Name("set5_name", 12, "Test");
BaseConfigItem *configSetPresetNames[] = {
	&set1Name,
	&set2Name,
	&set3Name,
	&set4Name,
	&set5Name,
	0
};

CompositeConfigItem presetNamesConfig("preset_names", 0, configSetPresetNames);

StringConfigItem currentSet("current_set", 4, "set1");

BaseConfigItem *configSetGlobal[] = {
	&hostName,
	&currentSet,
	0
};

CompositeConfigItem globalConfig("global", 0, configSetGlobal);

BaseConfigItem *configSetRoot[] = {
	&globalConfig,
	&presetNamesConfig,
	&ConfigSet1::config,
	&ConfigSet2::config,
	&ConfigSet3::config,
	&ConfigSet4::config,
	&ConfigSet5::config,
	0
};

CompositeConfigItem rootConfig("root", 0, configSetRoot);

EEPROMConfig config(rootConfig);

namespace CurrentConfig {
	String name("set1");
	CompositeConfigItem *config = &ConfigSet1::config;

	// Clock config values
	BooleanConfigItem *time_or_date = &ConfigSet1::time_or_date;
	ByteConfigItem *date_format = &ConfigSet1::date_format;
	BooleanConfigItem *time_format = &ConfigSet1::time_format;
	BooleanConfigItem *hour_format = &ConfigSet1::hour_format;
	ByteConfigItem *fading = &ConfigSet1::fading;
	ByteConfigItem *indicator = &ConfigSet1::indicator;
	BooleanConfigItem *scrollback = &ConfigSet1::scrollback;
	IntConfigItem *digits_on = &ConfigSet1::digits_on;
	ByteConfigItem *display_on = &ConfigSet1::display_on;
	ByteConfigItem *display_off = &ConfigSet1::display_off;
	StringConfigItem *time_url = &ConfigSet1::time_url;

	// LED config values
	ByteConfigItem *hue = &ConfigSet1::hue;
	ByteConfigItem *saturation = &ConfigSet1::saturation;
	BooleanConfigItem *backlight = &ConfigSet1::backlight;
	BooleanConfigItem *hue_cycling = &ConfigSet1::hue_cycling;
	ByteConfigItem *led_scale = &ConfigSet1::led_scale;
	IntConfigItem *cycle_time = &ConfigSet1::cycle_time;

	// Extra config values
	BooleanConfigItem *dimming = &ConfigSet1::dimming;
	BooleanConfigItem *display = &ConfigSet1::display;
	BooleanConfigItem *hv = &ConfigSet1::hv;
	ByteConfigItem *voltage = &ConfigSet1::voltage;
	IntConfigItem *digit = &ConfigSet1::digit;
	ByteConfigItem *count_speed = &ConfigSet1::count_speed;

	// UPS config values
	ByteConfigItem *charge_rate = &ConfigSet1::charge_rate;
	BooleanConfigItem *lpm = &ConfigSet1::lpm;
	ByteConfigItem *wakeup_time = &ConfigSet1::wakeup_time;
	ByteConfigItem *sensitivity = &ConfigSet1::sensitivity;

	void setCurrent(const String &name) {
		if (CurrentConfig::name == name) {
			return;	// Already set to this
		}

		BaseConfigItem *newConfig = rootConfig.get(name.c_str());

		if (newConfig) {
			DEBUG("Changing preset to:");
			DEBUG(name);
			CurrentConfig::name = name;
			config = static_cast<CompositeConfigItem*>(newConfig);

			/*
			 * I hate doing this.
			 */

			// Clock config values
			time_or_date = static_cast<BooleanConfigItem*>(config->get("time_or_date"));
			date_format = static_cast<ByteConfigItem*>(config->get("date_format"));
			time_format = static_cast<BooleanConfigItem*>(config->get("time_format"));
			hour_format = static_cast<BooleanConfigItem*>(config->get("hour_format"));
			fading = static_cast<ByteConfigItem*>(config->get("fading"));
			indicator = static_cast<ByteConfigItem*>(config->get("indicator"));
			scrollback = static_cast<BooleanConfigItem*>(config->get("scrollback"));
			digits_on = static_cast<IntConfigItem*>(config->get("digits_on"));
			display_on = static_cast<ByteConfigItem*>(config->get("display_on"));
			display_off = static_cast<ByteConfigItem*>(config->get("display_off"));
			time_url = static_cast<StringConfigItem*>(config->get("time_url"));

			// LED config values
			hue = static_cast<ByteConfigItem*>(config->get("hue"));
			saturation = static_cast<ByteConfigItem*>(config->get("saturation"));
			backlight = static_cast<BooleanConfigItem*>(config->get("backlight"));
			hue_cycling = static_cast<BooleanConfigItem*>(config->get("hue_cycling"));
			led_scale = static_cast<ByteConfigItem*>(config->get("led_scale"));
			cycle_time = static_cast<IntConfigItem*>(config->get("cycle_time"));

			// Extra config values
			dimming = static_cast<BooleanConfigItem*>(config->get("dimming"));
			display = static_cast<BooleanConfigItem*>(config->get("display"));
			hv = static_cast<BooleanConfigItem*>(config->get("hv"));
			voltage = static_cast<ByteConfigItem*>(config->get("voltage"));
			digit = static_cast<IntConfigItem*>(config->get("digit"));
			count_speed = static_cast<ByteConfigItem*>(config->get("count_speed"));

			// UPS config values
			charge_rate = static_cast<ByteConfigItem*>(config->get("charge_rate"));
			lpm = static_cast<BooleanConfigItem*>(config->get("lpm"));
			wakeup_time = static_cast<ByteConfigItem*>(config->get("wakeup_time"));
			sensitivity = static_cast<ByteConfigItem*>(config->get("sensitivity"));

			BaseConfigItem *currentSetName = rootConfig.get("current_set");
			currentSetName->fromString(name);
			currentSetName->put();
		}
	}
}

void initClock() {
	pDriver->init();
	pNixieClock->setNixieDriver(pDriver);
	pNixieClock->init();
}

void grabInts(String s, int *dest, String sep) {
	int end = 0;
	for (int start = 0; end != -1; start = end + 1) {
		end = s.indexOf(sep, start);
		if (end > 0) {
			*dest++ = s.substring(start, end).toInt();
		} else {
			*dest++ = s.substring(start).toInt();
		}
	}
}

void grabBytes(String s, byte *dest, String sep) {
	int end = 0;
	for (int start = 0; end != -1; start = end + 1) {
		end = s.indexOf(sep, start);
		if (end > 0) {
			*dest++ = s.substring(start, end).toInt();
		} else {
			*dest++ = s.substring(start).toInt();
		}
	}
}

void readTimeFailed(String msg) {
	DEBUG(msg);
}

#define SYNC_HOURS 3
#define SYNC_MINS 4
#define SYNC_SECS 5
#define SYNC_DAY 2
#define SYNC_MONTH 1
#define SYNC_YEAR 0

bool timeInitialized = false;

void setTimeFromInternet() {
	String body = httpClient.getBody();
	DEBUG(String("Got response") + body);
	int intValues[6];
	grabInts(body, &intValues[0], ",");

	timeInitialized = true;
    setTime(intValues[SYNC_HOURS], intValues[SYNC_MINS], intValues[SYNC_SECS], intValues[SYNC_DAY], intValues[SYNC_MONTH], intValues[SYNC_YEAR]);
}

AsyncWiFiManagerParameter *hostnameParam;

void initFromEEPROM() {
//	config.setDebugPrint(debugPrint);
	config.init();
//	rootConfig.debug(debugPrint);
	DEBUG(hostName);
	rootConfig.get();	// Read all of the config values from EEPROM
	String currentSetName = currentSet;
	CurrentConfig::setCurrent(currentSetName);
	DEBUG(hostName);

	hostnameParam = new AsyncWiFiManagerParameter("Hostname", "clock host name", hostName.value.c_str(), 63);
}

void createSSID() {
	// Create a unique SSID that includes the hostname. Max SSID length is 32!
	ssid = (chipId + hostName).substring(0, 31);
}

void getTime() {
	if (WiFi.status() == WL_CONNECTED) {
		httpClient.makeRequest(setTimeFromInternet, readTimeFailed);
	}
}

void StartOTA() {
	// Port defaults to 8266
	ArduinoOTA.setPort(8266);

	// Hostname defaults to esp8266-[ChipID]
	ArduinoOTA.setHostname(((String)hostName).c_str());

	// No authentication by default
//	ArduinoOTA.setPassword("in14");

	ArduinoOTA.onStart([]() {DEBUG("OTA Start");});
	ArduinoOTA.onEnd([]() {DEBUG("\nOTA End");});
	ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
		DEBUG("OTA Progress: ");DEBUG(progress / (total / 100));DEBUG("\r");
	});
	ArduinoOTA.onError([](ota_error_t error) {
		DEBUG("OTA Error:")
		switch (error) {
			case OTA_AUTH_ERROR: DEBUG("Auth Failed"); break;
			case OTA_BEGIN_ERROR: DEBUG("Begin Failed"); break;
			case OTA_CONNECT_ERROR: DEBUG("Connect Failed"); break;
			case OTA_RECEIVE_ERROR: DEBUG("Receive Failed"); break;
			case OTA_END_ERROR: DEBUG("End Failed"); break;
		}
	});

	ArduinoOTA.begin();
}

void mainHandler(AsyncWebServerRequest *request) {
	DEBUG("Got request")
	request->send(SPIFFS, "/index.html");
}

void sendFavicon(AsyncWebServerRequest *request) {
	DEBUG("Got favicon request")
	request->send(SPIFFS, "/assets/favicon-32x32.png", "image/png");
}

void broadcastUpdate(const BaseConfigItem& item) {
	const size_t bufferSize = JSON_OBJECT_SIZE(2) + JSON_OBJECT_SIZE(1);
	DynamicJsonBuffer jsonBuffer(bufferSize);

	JsonObject& root = jsonBuffer.createObject();
	root["type"] = "sv.update";

	JsonObject& value = root.createNestedObject("value");
	String rawJSON = item.toJSON();	// This object needs to hang around until we are done serializing.
	value[item.name] = ArduinoJson::RawJson(rawJSON.c_str());

//	root.printTo(*debugPrint);

    size_t len = root.measureLength();
    AsyncWebSocketMessageBuffer * buffer = ws.makeBuffer(len); //  creates a buffer (len + 1) for you.
    if (buffer) {
        root.printTo((char *)buffer->get(), len + 1);
    	ws.textAll(buffer);
    }
}

WSMenuHandler wsMenuHandler(ups);
WSConfigHandler wsClockHandler(rootConfig, "clock");
WSConfigHandler wsLEDHandler(rootConfig, "leds");
WSConfigHandler wsExtraHandler(rootConfig, "extra");
WSPresetValuesHandler wsPresetValuesHandler(rootConfig);
WSInfoHandler wsInfoHandler(ssid);
WSPresetNamesHandler wsPresetNamesHandler(rootConfig);
WSUPSHandler wsUPSHandler(rootConfig, "ups", ups, usbRating);

WSHandler *wsHandlers[] = {
	&wsMenuHandler,
	&wsClockHandler,
	&wsLEDHandler,
	&wsExtraHandler,
	&wsPresetValuesHandler,
	&wsInfoHandler,
	&wsPresetNamesHandler,
	&wsUPSHandler
};

void updateValue(int screen, String pair) {
	int index = pair.indexOf(':');
	DEBUG(pair)
	// _key has to hang around because key points to an internal data structure
	String _key = pair.substring(0, index);
	const char* key = _key.c_str();
	String value = pair.substring(index+1);
	if (screen == 4) {
		CurrentConfig::setCurrent(value);
		StringConfigItem temp(key, 10, value);
		broadcastUpdate(temp);
	} else if (screen == 6) {
		BaseConfigItem *item = rootConfig.get(key);
		if (item != 0) {
			item->fromString(value);
			item->put();
			broadcastUpdate(*item);
		}
	} else {
		if (strcmp(key, "tube_type") == 0) {
			BaseConfigItem *item = rootConfig.get(key);
			if (item != 0) {
				item->fromString(value);
				item->put();
				initClock();
				broadcastUpdate(*item);
			}
		} else {
			BaseConfigItem *item = CurrentConfig::config->get(key);
			if (item != 0) {
				item->fromString(value);
				item->put();
				// Shouldn't special case this stuff. Should attach listeners to the config value!
				// TODO: This won't work if we just switch change sets instead!
#ifndef USE_NTP
				if (strcmp(key, CurrentConfig::time_url->name) == 0) {
					httpClient.initialize(value);
					getTime();
				}
#endif
				broadcastUpdate(*item);
			}
		}
	}
}

/*
 * Handle application protocol
 */
void handleWSMsg(AsyncWebSocketClient *client, char *data) {
	String wholeMsg(data);
	int code = wholeMsg.substring(0, wholeMsg.indexOf(':')).toInt();

	if (code < 9) {
		wsHandlers[code]->handle(client, data);
	} else {
		String message = wholeMsg.substring(wholeMsg.indexOf(':')+1);
		int screen = message.substring(0, message.indexOf(':')).toInt();
		String pair = message.substring(message.indexOf(':')+1);
		updateValue(screen, pair);
	}
}

/*
 * Handle transport protocol
 */
void wsHandler(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
	//Handle WebSocket event
	switch (type) {
	case WS_EVT_CONNECT:
		DEBUG("WS connected")
		;
		break;
	case WS_EVT_DISCONNECT:
		DEBUG("WS disconnected")
		;
		break;
	case WS_EVT_ERROR:
		DEBUG("WS error")
		;
		DEBUG((char* )data)
		;
		break;
	case WS_EVT_PONG:
		DEBUG("WS pong")
		;
		break;
	case WS_EVT_DATA:	// Yay we got something!
		DEBUG("WS data")
		;
		AwsFrameInfo * info = (AwsFrameInfo*) arg;
		if (info->final && info->index == 0 && info->len == len) {
			//the whole message is in a single frame and we got all of it's data
			if (info->opcode == WS_TEXT) {
				DEBUG("WS text data");
				data[len] = 0;
				handleWSMsg(client, (char *) data);
			} else {
				DEBUG("WS binary data");
			}
		} else {
			DEBUG("WS data was split up!");
		}
		break;
	}
}

void eepromUpdate() {
	config.commit();
}

void snoozeUpdate();

void SetupServer() {
	DEBUG("SetupServer()");
	hostName = String(hostnameParam->getValue());
	hostName.put();
	config.commit();
	DEBUG(hostName.value);
	MDNS.begin(hostName.value.c_str());
    MDNS.addService("http", "tcp", 80);
	StartOTA();

	server.serveStatic("/", SPIFFS, "/");
	server.on("/", HTTP_GET, mainHandler).setFilter(ON_STA_FILTER);
	server.on("/assets/favicon-32x32.png", HTTP_GET, sendFavicon);
	server.serveStatic("/assets", SPIFFS, "/assets");

	// attach AsyncWebSocket
	ws.onEvent(wsHandler);
	server.addHandler(&ws);
	server.begin();
	ws.enable(true);

	getTime();
}

SoftMSTimer::TimerInfo syncTimeTimer = {
		3600000,	// 1 hour between syncs
		0,
		true,
		getTime
};

SoftMSTimer::TimerInfo *infos[] = {
		&syncTimeTimer,
		0
};

SoftMSTimer timedFunctions(infos);

void setup()
{
#ifdef NEOPIXELS
	pixels.begin(); // This initializes the NeoPixel library.
	pixels.setBrightness(0);
	pixels.show();
#endif

	chipId.toUpperCase();
//	Serial.begin(921600);
//	Serial.begin(115200);

	EEPROM.begin(1024);
	SPIFFS.begin();

	initFromEEPROM();

	initClock();

	createSSID();

	DEBUG("Set wifiManager")
	wifiManager.setDebugOutput(false);
	wifiManager.setConnectTimeout(10);
	wifiManager.setSaveConfigCallback(SetupServer);
    wifiManager.startConfigPortalModeless(ssid.c_str(), "secretsauce");

	httpClient.initialize("http://time.nixies.us/getTime/America/New_York");
	getTime();

	nowMs = millis();

	DEBUG("Exit setup")
}

int r = 256;
unsigned long nextMs = 0;

void loop()
{
	ArduinoOTA.handle();
	wifiManager.loop();

	nowMs = millis();

#ifdef NEOPIXELS
	  // For a set of NeoPixels the first NeoPixel is 0, second is 1, all the way up to the count of pixels minus one.

	  if (nowMs > nextMs) {
	    nextMs = nowMs + 15;
		pixels.setBrightness(255);

	    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
	    for (int i=0; i< NUMPIXELS; i++) {
	        pixels.setPixelColor(i, pixels.Color(abs(r - 255),30,30)); // Moderately bright green color.
	    }

	    pixels.show(); // This sends the updated pixel color to the hardware.

	    r = (r + 1) % 510;
	  }
#endif

	if (timeInitialized) {
		pNixieClock->setClockMode(true);
		pNixieClock->setCountSpeed(60);
	} else {
		pNixieClock->setClockMode(false);
		pNixieClock->setCountSpeed(60);
	}

	pNixieClock->setFadeMode(0);
	pNixieClock->setTimeMode(true);
	pNixieClock->setDateFormat(1);
	pNixieClock->setShowSeconds(false);
	pNixieClock->set12hour(false);
	pNixieClock->setOnOff(6, 0);
	pNixieClock->setDigitsOn(1500);
	pNixieClock->setScrollback(true);

	pNixieClock->loop(nowMs);
	timedFunctions.loop();
}
